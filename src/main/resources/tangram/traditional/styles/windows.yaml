windows:
    base: polygons
    animated: true

    material:
        emission: 0
        diffuse: 1
    # lighting: false

    shaders:
        uniforms:
            u_frequency: 10.
            u_windowColor: [1., 1., .9]
            u_buildingColor: [.8, .8, .7]
            u_roofColor: [.5, .4, .5]
        blocks:
            global: |

                // 3d noise
                vec4 v_mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
                vec4 perm(vec4 x){return v_mod289(((x * 34.0) + 1.0) * x);}
                float noise(vec3 p){
                    vec3 a = floor(p);
                    vec3 d = p - a;
                    d = d * d * (3.0 - 2.0 * d);

                    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
                    vec4 k1 = perm(b.xyxy);
                    vec4 k2 = perm(k1.xyxy + b.zzww);

                    vec4 c = k2 + a.zzzz;
                    vec4 k3 = perm(c);
                    vec4 k4 = perm(c + 1.0);

                    vec4 o1 = fract(k3 * (1.0 / 41.0));
                    vec4 o2 = fract(k4 * (1.0 / 41.0));

                    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
                    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

                    return o4.y * d.y + o4.x * (1.0 - d.y);
                }

            color: |
                vec3 vPos = v_world_position.xyz / u_frequency;
                vec3 mask = mix(vec3(0.0), vec3(1.0), step(fract(mod(vPos, .9)), vec3(.4, .4, .6)));

                // Roof
                if (v_normal.z > .6 || v_normal.z < -.6) {
                    color.rgb = u_roofColor;
                    color.rgb -= vec3(vPos.z * .01); // height factor
                }
                else {
                    // Wall
                    if (mask.x + mask.y + mask.z > .5) {
                        color.rgb = u_buildingColor;
                        color.rgb -= vec3(vPos.z * .1); // height factor
                    }
                    // Window
                    else {
                        float noiseColor = 2. * noise(v_world_position.xyz * 0.1 + (floor(u_time * 5.) / 10.));
                        color.rgb = u_windowColor * noiseColor;

                        material.emission.rgb = color.rgb;
                        material.diffuse = vec4(0.);
                    }
                }
