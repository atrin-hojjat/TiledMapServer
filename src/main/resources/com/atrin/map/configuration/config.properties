server.port=1111
server.host=0.0.0.0


log.file=map.log

web.dir=webdir
web.url=/webdir/*

tangram.styles.dir=tangram
tangram.styles.metadata.json.file=tangram/styles.json
tangram.styles.metadata.json.url=/styles/tangram/styles.json
tangram.url=/styles/tangram/*

data.prototype.geojson.dir=GeoJsonData
data.prototype.geojson.url=/data/prototype/geojson/*
data.prototype.topojson.dir=TopoJsonData
data.prototype.topojson.url=/data/prototype/topojson/*

bboxvtile.url=/map/tiles/bboxvtile/:LAYERS/:NORTH/:EAST/:WEST/:SOUTH/bboxvtile.:FORMAT
bboxvtile.formatedstring=/bboxvtile/%s/%f/%f/%f/%f/bboxvtile.%s
bboxvtile.encryptedurl=/bboxcryptovtile/:CRYPTO

vtile.url=/map/tiles/vector/:LAYERS/:Z/:X/:Y/vtile.:FORMAT
vtile.formatedstring=/vector/%s/%d/%d/%d/vtile.%s
vtile.encryptedurl=/vector/:CRYPTO

#tile.url=/tile/:STYLE/:LAYERS/:Z/:X/:Y/tile.:FORMAT
#tile.formatedstring=/tile/%s/%s/%d/%d/%d/tile.%s
#tile.encryptedurl=/tile/:CRYPTO
#
#bboxtile.url=/bboxtile/:LAYERS/:NORTH/:EAST/:WEST/:SOUTH/bboxtile.:FORMAT
#bboxtile.formatedstring=/bbotilex/%s/%f/%f/%f/%f/bboxtile.%s
#bboxtile.encryptedurl=/bboxtilecrypto/:CRYPTO

layers.defaults.all=all
layers.defaults.buildings=buildings
layers.defaults.water=water
layers.defaults.landuse=landuse
layers.defaults.roads=roads
layers.defaults.points_of_interest=pois
layers.defaults.places=places

database.default.host 		= 127.0.0.1
database.default.port 		= 5432
database.default.username 	= atrin
database.default.password 	= AtrinGeoSysInfoDataBase
database.default.name 		= geoinfosys

tehranroads.url=/map/tiles/tests/tehran_roads/:Z/:X/:Y/vtile.geojson
tehranroads.url.formated=/map/tiles/tests/tehran_roads/%d/%d/%d/vtile.geojson
tehranroads.database.query = select class,oneway,bridge,tunnel,name,(ST_AsGeoJSON(ST_SimplifyPreserveTopology(geom,%s))) As Geojson from geoinfosys where geoinfosys.geom && st_makeenvelope(%s) limit 5000
#tehranroads.database.query = select oneway,bridge,tunnel,name,(ST_AsGeoJSON(ST_SimplifyPreserveTopology(st_transform(way,4326),%s))) As Geojson from planet_osm_roads where st_transform(planet_osm_roads.way,4326) && st_makeenvelope(%s) limit 5000
tehranroads.database.fields.geojosn = geojson
tehranroads.database.fields.name = name
tehranroads.database.fields.oneway = oneway
tehranroads.database.fields.tunnel = tunnel
tehranroads.database.fields.bridge = bridge
tehranroads.database.fields._class = class
tehranroads.geojson.format.whole = {"type": "FeatureCollection","crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },"features":[%s]}
tehranroads.geojson.format.feature = {"type":"Feature","properties":{"name":%s,"tunnel":%d,"bridge":%d,"oneway":%d,"class":%s},"geometry":%s}
#tehranroads.geojson.format.feature = {"type":"Feature","properties":{"name":%s,"tunnel":%d,"bridge":%d,"oneway":%d},"geometry":%s}
tehranroads.fs.main_folder=./vtiles/test/getroads/
tehranroads.fs.file=%s/%s/%s.gzip

simplified_land_polygons.url=/map/tiles/simplified_land_polygons/:Z/:X/:Y/vtile.geojson
simplified_land_polygons.database.query = select (ST_AsGeoJSON(st_transform(geom,4326))) As Geojson from simplified_land_polygons where simplified_land_polygons.geom && st_makeenvelope(%s) limit 5000
simplified_land_polygons.database.fields.geojosn = geojson
simplified_land_polygons.geojson.format.whole = {"type": "FeatureCollection","crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },"features":[%s]}
simplified_land_polygons.geojson.format.feature = {"type":"Feature","geometry":%s}
